//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace flickrSense
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace flickrSense.FlickrClientApp_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[81];
            _typeNameTable[0] = "Template10.Common.BootStrapper";
            _typeNameTable[1] = "Windows.UI.Xaml.Application";
            _typeNameTable[2] = "Template10.Common.StateItems";
            _typeNameTable[3] = "System.Collections.Generic.Dictionary`2<String, Object>";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Template10.Services.NavigationService.INavigationService";
            _typeNameTable[7] = "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>";
            _typeNameTable[8] = "System.MulticastDelegate";
            _typeNameTable[9] = "System.Delegate";
            _typeNameTable[10] = "TimeSpan";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "Boolean";
            _typeNameTable[13] = "Windows.ApplicationModel.Activation.IActivatedEventArgs";
            _typeNameTable[14] = "Template10.Common.BootStrapper.States";
            _typeNameTable[15] = "System.Enum";
            _typeNameTable[16] = "Template10.Controls.ModalDialog";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[18] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[19] = "flickrSense.ViewModels.ViewModelLocator";
            _typeNameTable[20] = "flickrSense.ViewModels.MainPageViewModel";
            _typeNameTable[21] = "Template10.Mvvm.ViewModelBase";
            _typeNameTable[22] = "Template10.Mvvm.BindableBase";
            _typeNameTable[23] = "flickrSense.ViewModels.DetailPageViewModel";
            _typeNameTable[24] = "flickrSense.ViewModels.MapControlPageViewModel";
            _typeNameTable[25] = "UwpHelpers.Controls.ImageControls.NetworkImage";
            _typeNameTable[26] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[27] = "Double";
            _typeNameTable[28] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[29] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[30] = "Windows.UI.Color";
            _typeNameTable[31] = "Byte";
            _typeNameTable[32] = "Template10.Controls.HamburgerMenu";
            _typeNameTable[33] = "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[34] = "System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[35] = "Template10.Controls.HamburgerButtonInfo";
            _typeNameTable[36] = "Template10.Mvvm.DependencyBindableBase";
            _typeNameTable[37] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[38] = "Template10.Controls.HamburgerButtonInfo.ButtonTypes";
            _typeNameTable[39] = "Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo";
            _typeNameTable[40] = "System.Windows.Input.ICommand";
            _typeNameTable[41] = "System.Type";
            _typeNameTable[42] = "System.Nullable`1<Boolean>";
            _typeNameTable[43] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[44] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[45] = "Windows.UI.Xaml.Controls.SplitViewDisplayMode";
            _typeNameTable[46] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[47] = "Template10.Controls.HamburgerMenu.OpenCloseModes";
            _typeNameTable[48] = "Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[49] = "Template10.Controls.PageHeader";
            _typeNameTable[50] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[51] = "Template10.Behaviors.EllipsisBehavior.Visibilities";
            _typeNameTable[52] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[53] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[54] = "Template10.Controls.Resizer";
            _typeNameTable[55] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[56] = "Windows.Foundation.Size";
            _typeNameTable[57] = "flickrSense.Views.Busy";
            _typeNameTable[58] = "Template10.Converters.ValueWhenConverter";
            _typeNameTable[59] = "flickrSense.Views.DetailPage";
            _typeNameTable[60] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[61] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[62] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[63] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[64] = "UwpHelpers.Controls.ListControls.AdaptiveGridView";
            _typeNameTable[65] = "Windows.UI.Xaml.Controls.GridView";
            _typeNameTable[66] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[67] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[68] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[69] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[70] = "Microsoft.Xaml.Interactions.Core.InvokeCommandAction";
            _typeNameTable[71] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[72] = "flickrSense.Views.MainPage";
            _typeNameTable[73] = "flickrSense.Views.MapControlPage";
            _typeNameTable[74] = "flickrSense.ViewModels.SettingsPageViewModel";
            _typeNameTable[75] = "flickrSense.ViewModels.SettingsPartViewModel";
            _typeNameTable[76] = "flickrSense.ViewModels.AboutPartViewModel";
            _typeNameTable[77] = "Template10.Common.IDispatcherWrapper";
            _typeNameTable[78] = "Template10.Common.IStateItems";
            _typeNameTable[79] = "flickrSense.Views.SettingsPage";
            _typeNameTable[80] = "flickrSense.Views.Splash";

            _typeTable = new global::System.Type[81];
            _typeTable[0] = typeof(global::Template10.Common.BootStrapper);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Application);
            _typeTable[2] = typeof(global::Template10.Common.StateItems);
            _typeTable[3] = typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Template10.Services.NavigationService.INavigationService);
            _typeTable[7] = typeof(global::System.Func<global::Windows.ApplicationModel.Activation.SplashScreen, global::Windows.UI.Xaml.Controls.UserControl>);
            _typeTable[8] = typeof(global::System.MulticastDelegate);
            _typeTable[9] = typeof(global::System.Delegate);
            _typeTable[10] = typeof(global::System.TimeSpan);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::System.Boolean);
            _typeTable[13] = typeof(global::Windows.ApplicationModel.Activation.IActivatedEventArgs);
            _typeTable[14] = typeof(global::Template10.Common.BootStrapper.States);
            _typeTable[15] = typeof(global::System.Enum);
            _typeTable[16] = typeof(global::Template10.Controls.ModalDialog);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[19] = typeof(global::flickrSense.ViewModels.ViewModelLocator);
            _typeTable[20] = typeof(global::flickrSense.ViewModels.MainPageViewModel);
            _typeTable[21] = typeof(global::Template10.Mvvm.ViewModelBase);
            _typeTable[22] = typeof(global::Template10.Mvvm.BindableBase);
            _typeTable[23] = typeof(global::flickrSense.ViewModels.DetailPageViewModel);
            _typeTable[24] = typeof(global::flickrSense.ViewModels.MapControlPageViewModel);
            _typeTable[25] = typeof(global::UwpHelpers.Controls.ImageControls.NetworkImage);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[27] = typeof(global::System.Double);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[30] = typeof(global::Windows.UI.Color);
            _typeTable[31] = typeof(global::System.Byte);
            _typeTable[32] = typeof(global::Template10.Controls.HamburgerMenu);
            _typeTable[33] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[34] = typeof(global::System.Collections.ObjectModel.Collection<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[35] = typeof(global::Template10.Controls.HamburgerButtonInfo);
            _typeTable[36] = typeof(global::Template10.Mvvm.DependencyBindableBase);
            _typeTable[37] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[38] = typeof(global::Template10.Controls.HamburgerButtonInfo.ButtonTypes);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo);
            _typeTable[40] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[41] = typeof(global::System.Type);
            _typeTable[42] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[43] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[44] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[45] = typeof(global::Windows.UI.Xaml.Controls.SplitViewDisplayMode);
            _typeTable[46] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[47] = typeof(global::Template10.Controls.HamburgerMenu.OpenCloseModes);
            _typeTable[48] = typeof(global::Template10.Mvvm.DelegateCommand<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[49] = typeof(global::Template10.Controls.PageHeader);
            _typeTable[50] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[51] = typeof(global::Template10.Behaviors.EllipsisBehavior.Visibilities);
            _typeTable[52] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[53] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[54] = typeof(global::Template10.Controls.Resizer);
            _typeTable[55] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[56] = typeof(global::Windows.Foundation.Size);
            _typeTable[57] = typeof(global::flickrSense.Views.Busy);
            _typeTable[58] = typeof(global::Template10.Converters.ValueWhenConverter);
            _typeTable[59] = typeof(global::flickrSense.Views.DetailPage);
            _typeTable[60] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[61] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[62] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[63] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[64] = typeof(global::UwpHelpers.Controls.ListControls.AdaptiveGridView);
            _typeTable[65] = typeof(global::Windows.UI.Xaml.Controls.GridView);
            _typeTable[66] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[67] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[68] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[69] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[70] = typeof(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction);
            _typeTable[71] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[72] = typeof(global::flickrSense.Views.MainPage);
            _typeTable[73] = typeof(global::flickrSense.Views.MapControlPage);
            _typeTable[74] = typeof(global::flickrSense.ViewModels.SettingsPageViewModel);
            _typeTable[75] = typeof(global::flickrSense.ViewModels.SettingsPartViewModel);
            _typeTable[76] = typeof(global::flickrSense.ViewModels.AboutPartViewModel);
            _typeTable[77] = typeof(global::Template10.Common.IDispatcherWrapper);
            _typeTable[78] = typeof(global::Template10.Common.IStateItems);
            _typeTable[79] = typeof(global::flickrSense.Views.SettingsPage);
            _typeTable[80] = typeof(global::flickrSense.Views.Splash);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_2_StateItems() { return new global::Template10.Common.StateItems(); }
        private object Activate_3_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>(); }
        private object Activate_16_ModalDialog() { return new global::Template10.Controls.ModalDialog(); }
        private object Activate_19_ViewModelLocator() { return new global::flickrSense.ViewModels.ViewModelLocator(); }
        private object Activate_20_MainPageViewModel() { return new global::flickrSense.ViewModels.MainPageViewModel(); }
        private object Activate_23_DetailPageViewModel() { return new global::flickrSense.ViewModels.DetailPageViewModel(); }
        private object Activate_24_MapControlPageViewModel() { return new global::flickrSense.ViewModels.MapControlPageViewModel(); }
        private object Activate_25_NetworkImage() { return new global::UwpHelpers.Controls.ImageControls.NetworkImage(); }
        private object Activate_32_HamburgerMenu() { return new global::Template10.Controls.HamburgerMenu(); }
        private object Activate_33_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>(); }
        private object Activate_34_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Template10.Controls.HamburgerButtonInfo>(); }
        private object Activate_35_HamburgerButtonInfo() { return new global::Template10.Controls.HamburgerButtonInfo(); }
        private object Activate_49_PageHeader() { return new global::Template10.Controls.PageHeader(); }
        private object Activate_54_Resizer() { return new global::Template10.Controls.Resizer(); }
        private object Activate_57_Busy() { return new global::flickrSense.Views.Busy(); }
        private object Activate_58_ValueWhenConverter() { return new global::Template10.Converters.ValueWhenConverter(); }
        private object Activate_59_DetailPage() { return new global::flickrSense.Views.DetailPage(); }
        private object Activate_62_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_64_AdaptiveGridView() { return new global::UwpHelpers.Controls.ListControls.AdaptiveGridView(); }
        private object Activate_67_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_69_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_70_InvokeCommandAction() { return new global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction(); }
        private object Activate_72_MainPage() { return new global::flickrSense.Views.MainPage(); }
        private object Activate_73_MapControlPage() { return new global::flickrSense.Views.MapControlPage(); }
        private object Activate_74_SettingsPageViewModel() { return new global::flickrSense.ViewModels.SettingsPageViewModel(); }
        private object Activate_75_SettingsPartViewModel() { return new global::flickrSense.ViewModels.SettingsPartViewModel(); }
        private object Activate_76_AboutPartViewModel() { return new global::flickrSense.ViewModels.AboutPartViewModel(); }
        private object Activate_79_SettingsPage() { return new global::flickrSense.Views.SettingsPage(); }
        private void MapAdd_2_StateItems(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_3_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_33_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Template10.Controls.HamburgerButtonInfo>)instance;
            var newItem = (global::Template10.Controls.HamburgerButtonInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Template10.Controls.HamburgerButtonInfo>)instance;
            var newItem = (global::Template10.Controls.HamburgerButtonInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_62_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_69_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Template10.Common.BootStrapper
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Application"));
                userType.AddMemberName("SessionState");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("SplashFactory");
                userType.AddMemberName("CacheMaxDuration");
                userType.AddMemberName("ShowShellBackButton");
                userType.AddMemberName("ForceShowShellBackButton");
                userType.AddMemberName("OriginalActivatedArgs");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("EnableAutoRestoreAfterTerminated");
                userType.AddMemberName("AutoRestoreAfterTerminated");
                userType.AddMemberName("AutoExtendExecutionSession");
                userType.AddMemberName("AutoSuspendAllFrames");
                userType.AddMemberName("ModalDialog");
                userType.AddMemberName("ModalContent");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Application
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Template10.Common.StateItems
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.Dictionary`2<String, Object>"));
                userType.DictionaryAdd = MapAdd_2_StateItems;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Collections.Generic.Dictionary`2<String, Object>
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_Dictionary;
                userType.DictionaryAdd = MapAdd_3_Dictionary;
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Template10.Services.NavigationService.INavigationService
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.MulticastDelegate
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 9:   //  System.Delegate
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  TimeSpan
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Boolean
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.ApplicationModel.Activation.IActivatedEventArgs
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Template10.Common.BootStrapper.States
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Common.BootStrapper.States.None);
                userType.AddEnumValue("Running", global::Template10.Common.BootStrapper.States.Running);
                userType.AddEnumValue("BeforeInit", global::Template10.Common.BootStrapper.States.BeforeInit);
                userType.AddEnumValue("AfterInit", global::Template10.Common.BootStrapper.States.AfterInit);
                userType.AddEnumValue("BeforeLaunch", global::Template10.Common.BootStrapper.States.BeforeLaunch);
                userType.AddEnumValue("AfterLaunch", global::Template10.Common.BootStrapper.States.AfterLaunch);
                userType.AddEnumValue("BeforeActivate", global::Template10.Common.BootStrapper.States.BeforeActivate);
                userType.AddEnumValue("AfterActivate", global::Template10.Common.BootStrapper.States.AfterActivate);
                userType.AddEnumValue("BeforeStart", global::Template10.Common.BootStrapper.States.BeforeStart);
                userType.AddEnumValue("AfterStart", global::Template10.Common.BootStrapper.States.AfterStart);
                xamlType = userType;
                break;

            case 15:   //  System.Enum
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 16:   //  Template10.Controls.ModalDialog
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  flickrSense.ViewModels.ViewModelLocator
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_ViewModelLocator;
                userType.AddMemberName("MainPageVm");
                userType.AddMemberName("DetailPageVm");
                userType.AddMemberName("MapControlPageVm");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  flickrSense.ViewModels.MainPageViewModel
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Template10.Mvvm.ViewModelBase
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("Dispatcher");
                userType.AddMemberName("SessionState");
                xamlType = userType;
                break;

            case 22:   //  Template10.Mvvm.BindableBase
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 23:   //  flickrSense.ViewModels.DetailPageViewModel
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  flickrSense.ViewModels.MapControlPageViewModel
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  UwpHelpers.Controls.ImageControls.NetworkImage
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_25_NetworkImage;
                userType.AddMemberName("ImageUrl");
                userType.AddMemberName("ImageDecodeWidth");
                userType.AddMemberName("ImageDecodeHeight");
                userType.AddMemberName("IsActive");
                userType.AddMemberName("DownloadProgressStatus");
                userType.AddMemberName("ImageStretch");
                userType.AddMemberName("DownloadPercentageVisibility");
                userType.AddMemberName("ProgressRingVisibility");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Double
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Windows.UI.Color
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 31:   //  Byte
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Template10.Controls.HamburgerMenu
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_32_HamburgerMenu;
                userType.SetContentPropertyName("Template10.Controls.HamburgerMenu.PrimaryButtons");
                userType.AddMemberName("PrimaryButtons");
                userType.AddMemberName("PaneBorderThickness");
                userType.AddMemberName("SecondarySeparator");
                userType.AddMemberName("NavButtonBackground");
                userType.AddMemberName("NavButtonForeground");
                userType.AddMemberName("NavAreaBackground");
                userType.AddMemberName("HamburgerForeground");
                userType.AddMemberName("HamburgerBackground");
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("VisualStateWideMinWidth");
                userType.AddMemberName("PaneBorderBrush");
                userType.AddMemberName("NavButtonCheckedForeground");
                userType.AddMemberName("NavButtonCheckedBackground");
                userType.AddMemberName("NavButtonCheckedIndicatorBrush");
                userType.AddMemberName("NavButtonPressedForeground");
                userType.AddMemberName("NavButtonPressedBackground");
                userType.AddMemberName("NavButtonHoverForeground");
                userType.AddMemberName("NavButtonHoverBackground");
                userType.AddMemberName("HamburgerButtonVisibility");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("VisualStateNarrowDisplayMode");
                userType.AddMemberName("VisualStateNormalDisplayMode");
                userType.AddMemberName("VisualStateWideDisplayMode");
                userType.AddMemberName("SecondaryButtonOrientation");
                userType.AddMemberName("AccentColor");
                userType.AddMemberName("Selected");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("IsFullScreen");
                userType.AddMemberName("PaneWidth");
                userType.AddMemberName("HamburgerButtonGridWidth");
                userType.AddMemberName("OpenCloseMode");
                userType.AddMemberName("HeaderContent");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("SecondaryButtons");
                userType.AddMemberName("NavCommand");
                userType.AddMemberName("PropertyChangedHandlers");
                xamlType = userType;
                break;

            case 33:   //  System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>"));
                userType.CollectionAdd = VectorAdd_33_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_34_Collection;
                userType.CollectionAdd = VectorAdd_34_Collection;
                xamlType = userType;
                break;

            case 35:   //  Template10.Controls.HamburgerButtonInfo
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.DependencyBindableBase"));
                userType.Activator = Activate_35_HamburgerButtonInfo;
                userType.SetContentPropertyName("Template10.Controls.HamburgerButtonInfo.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("ButtonType");
                userType.AddMemberName("NavigationTransitionInfo");
                userType.AddMemberName("Command");
                userType.AddMemberName("ToolTip");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("GroupName");
                userType.AddMemberName("PageType");
                userType.AddMemberName("PageParameter");
                userType.AddMemberName("ClearHistory");
                userType.AddMemberName("ClearCache");
                userType.AddMemberName("Visibility");
                userType.AddMemberName("IsEnabled");
                userType.AddMemberName("IsChecked");
                userType.AddMemberName("MaxWidth");
                xamlType = userType;
                break;

            case 36:   //  Template10.Mvvm.DependencyBindableBase
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 37:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Template10.Controls.HamburgerButtonInfo.ButtonTypes
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Toggle", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Toggle);
                userType.AddEnumValue("Command", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Command);
                userType.AddEnumValue("Literal", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Literal);
                xamlType = userType;
                break;

            case 39:   //  Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  System.Windows.Input.ICommand
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  System.Type
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 42:   //  System.Nullable`1<Boolean>
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  Windows.UI.Xaml.Controls.SplitViewDisplayMode
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 46:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Template10.Controls.HamburgerMenu.OpenCloseModes
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Controls.HamburgerMenu.OpenCloseModes.None);
                userType.AddEnumValue("Auto", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Auto);
                userType.AddEnumValue("Tap", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Tap);
                userType.AddEnumValue("Swipe", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Swipe);
                xamlType = userType;
                break;

            case 48:   //  Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  Template10.Controls.PageHeader
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.CommandBar"));
                userType.Activator = Activate_49_PageHeader;
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("EllipsisVisibility");
                userType.AddMemberName("PrimaryCommandsVisibility");
                userType.AddMemberName("BackButtonVisibility");
                userType.AddMemberName("BackButtonContent");
                userType.AddMemberName("Frame");
                userType.AddMemberName("EnableHamburgerMenuAutoLayout");
                userType.AddMemberName("Text");
                xamlType = userType;
                break;

            case 50:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Template10.Behaviors.EllipsisBehavior.Visibilities
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Visible);
                userType.AddEnumValue("Collapsed", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Collapsed);
                userType.AddEnumValue("Auto", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Auto);
                xamlType = userType;
                break;

            case 52:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 53:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  Template10.Controls.Resizer
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_54_Resizer;
                userType.SetContentPropertyName("Template10.Controls.Resizer.ElementControl");
                userType.AddMemberName("ElementControl");
                userType.AddMemberName("GrabberBrush");
                userType.AddMemberName("GrabberVisibility");
                userType.AddMemberName("GrabberSize");
                xamlType = userType;
                break;

            case 55:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 56:   //  Windows.Foundation.Size
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 57:   //  flickrSense.Views.Busy
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_57_Busy;
                userType.AddMemberName("BusyText");
                userType.AddMemberName("IsBusy");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  Template10.Converters.ValueWhenConverter
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_58_ValueWhenConverter;
                userType.AddMemberName("When");
                userType.AddMemberName("Value");
                userType.AddMemberName("Otherwise");
                userType.AddMemberName("OtherwiseValueBack");
                userType.AddMemberName("Debug");
                xamlType = userType;
                break;

            case 59:   //  flickrSense.Views.DetailPage
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_59_DetailPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 61:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 62:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_62_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 64:   //  UwpHelpers.Controls.ListControls.AdaptiveGridView
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.GridView"));
                userType.Activator = Activate_64_AdaptiveGridView;
                userType.AddMemberName("MinItemHeight");
                userType.AddMemberName("MinItemWidth");
                userType.AddMemberName("HasItems");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Windows.UI.Xaml.Controls.GridView
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 66:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 67:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.Activator = Activate_67_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                xamlType = userType;
                break;

            case 68:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 69:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_69_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 70:   //  Microsoft.Xaml.Interactions.Core.InvokeCommandAction
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_70_InvokeCommandAction;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("InputConverter");
                userType.AddMemberName("InputConverterParameter");
                userType.AddMemberName("InputConverterLanguage");
                xamlType = userType;
                break;

            case 71:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 72:   //  flickrSense.Views.MainPage
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_72_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 73:   //  flickrSense.Views.MapControlPage
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_73_MapControlPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 74:   //  flickrSense.ViewModels.SettingsPageViewModel
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_74_SettingsPageViewModel;
                userType.AddMemberName("SettingsPartViewModel");
                userType.AddMemberName("AboutPartViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 75:   //  flickrSense.ViewModels.SettingsPartViewModel
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 76:   //  flickrSense.ViewModels.AboutPartViewModel
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 77:   //  Template10.Common.IDispatcherWrapper
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 78:   //  Template10.Common.IStateItems
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 79:   //  flickrSense.Views.SettingsPage
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_79_SettingsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 80:   //  flickrSense.Views.Splash
                userType = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BootStrapper_SessionState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SessionState;
        }
        private void set_0_BootStrapper_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.SessionState = (global::Template10.Common.StateItems)Value;
        }
        private object get_1_BootStrapper_NavigationService(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.NavigationService;
        }
        private object get_2_BootStrapper_SplashFactory(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SplashFactory;
        }
        private object get_3_BootStrapper_CacheMaxDuration(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CacheMaxDuration;
        }
        private void set_3_BootStrapper_CacheMaxDuration(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CacheMaxDuration = (global::System.TimeSpan)Value;
        }
        private object get_4_BootStrapper_ShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ShowShellBackButton;
        }
        private void set_4_BootStrapper_ShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_5_BootStrapper_ForceShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ForceShowShellBackButton;
        }
        private void set_5_BootStrapper_ForceShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ForceShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_6_BootStrapper_OriginalActivatedArgs(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.OriginalActivatedArgs;
        }
        private object get_7_BootStrapper_CurrentState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CurrentState;
        }
        private void set_7_BootStrapper_CurrentState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CurrentState = (global::Template10.Common.BootStrapper.States)Value;
        }
        private object get_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.EnableAutoRestoreAfterTerminated;
        }
        private void set_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.EnableAutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_9_BootStrapper_AutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoRestoreAfterTerminated;
        }
        private void set_9_BootStrapper_AutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_10_BootStrapper_AutoExtendExecutionSession(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoExtendExecutionSession;
        }
        private void set_10_BootStrapper_AutoExtendExecutionSession(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoExtendExecutionSession = (global::System.Boolean)Value;
        }
        private object get_11_BootStrapper_AutoSuspendAllFrames(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoSuspendAllFrames;
        }
        private void set_11_BootStrapper_AutoSuspendAllFrames(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoSuspendAllFrames = (global::System.Boolean)Value;
        }
        private object get_12_BootStrapper_ModalDialog(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalDialog;
        }
        private object get_13_BootStrapper_ModalContent(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalContent;
        }
        private void set_13_BootStrapper_ModalContent(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ModalContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_14_ViewModelLocator_MainPageVm(object instance)
        {
            var that = (global::flickrSense.ViewModels.ViewModelLocator)instance;
            return that.MainPageVm;
        }
        private object get_15_ViewModelLocator_DetailPageVm(object instance)
        {
            var that = (global::flickrSense.ViewModels.ViewModelLocator)instance;
            return that.DetailPageVm;
        }
        private object get_16_ViewModelLocator_MapControlPageVm(object instance)
        {
            var that = (global::flickrSense.ViewModels.ViewModelLocator)instance;
            return that.MapControlPageVm;
        }
        private object get_17_NetworkImage_ImageUrl(object instance)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            return that.ImageUrl;
        }
        private void set_17_NetworkImage_ImageUrl(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            that.ImageUrl = (global::System.String)Value;
        }
        private object get_18_NetworkImage_ImageDecodeWidth(object instance)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            return that.ImageDecodeWidth;
        }
        private void set_18_NetworkImage_ImageDecodeWidth(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            that.ImageDecodeWidth = (global::System.Double)Value;
        }
        private object get_19_NetworkImage_ImageDecodeHeight(object instance)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            return that.ImageDecodeHeight;
        }
        private void set_19_NetworkImage_ImageDecodeHeight(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            that.ImageDecodeHeight = (global::System.Double)Value;
        }
        private object get_20_NetworkImage_IsActive(object instance)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            return that.IsActive;
        }
        private void set_20_NetworkImage_IsActive(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            that.IsActive = (global::System.Boolean)Value;
        }
        private object get_21_NetworkImage_DownloadProgressStatus(object instance)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            return that.DownloadProgressStatus;
        }
        private void set_21_NetworkImage_DownloadProgressStatus(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            that.DownloadProgressStatus = (global::System.String)Value;
        }
        private object get_22_NetworkImage_ImageStretch(object instance)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            return that.ImageStretch;
        }
        private void set_22_NetworkImage_ImageStretch(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            that.ImageStretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_23_NetworkImage_DownloadPercentageVisibility(object instance)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            return that.DownloadPercentageVisibility;
        }
        private void set_23_NetworkImage_DownloadPercentageVisibility(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            that.DownloadPercentageVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_24_NetworkImage_ProgressRingVisibility(object instance)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            return that.ProgressRingVisibility;
        }
        private void set_24_NetworkImage_ProgressRingVisibility(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ImageControls.NetworkImage)instance;
            that.ProgressRingVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_25_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_25_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_26_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_26_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_27_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_27_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_28_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_28_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_29_HamburgerMenu_PrimaryButtons(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PrimaryButtons;
        }
        private void set_29_HamburgerMenu_PrimaryButtons(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PrimaryButtons = (global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>)Value;
        }
        private object get_30_HamburgerButtonInfo_Content(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Content;
        }
        private void set_30_HamburgerButtonInfo_Content(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Content = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_31_HamburgerButtonInfo_ButtonType(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ButtonType;
        }
        private void set_31_HamburgerButtonInfo_ButtonType(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ButtonType = (global::Template10.Controls.HamburgerButtonInfo.ButtonTypes)Value;
        }
        private object get_32_HamburgerButtonInfo_NavigationTransitionInfo(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.NavigationTransitionInfo;
        }
        private void set_32_HamburgerButtonInfo_NavigationTransitionInfo(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.NavigationTransitionInfo = (global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo)Value;
        }
        private object get_33_HamburgerButtonInfo_Command(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Command;
        }
        private void set_33_HamburgerButtonInfo_Command(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_34_HamburgerButtonInfo_ToolTip(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ToolTip;
        }
        private void set_34_HamburgerButtonInfo_ToolTip(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ToolTip = (global::System.Object)Value;
        }
        private object get_35_HamburgerButtonInfo_CommandParameter(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.CommandParameter;
        }
        private void set_35_HamburgerButtonInfo_CommandParameter(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_36_HamburgerButtonInfo_GroupName(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.GroupName;
        }
        private void set_36_HamburgerButtonInfo_GroupName(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.GroupName = (global::System.Object)Value;
        }
        private object get_37_HamburgerButtonInfo_PageType(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.PageType;
        }
        private void set_37_HamburgerButtonInfo_PageType(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.PageType = (global::System.Type)Value;
        }
        private object get_38_HamburgerButtonInfo_PageParameter(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.PageParameter;
        }
        private void set_38_HamburgerButtonInfo_PageParameter(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.PageParameter = (global::System.Object)Value;
        }
        private object get_39_HamburgerButtonInfo_ClearHistory(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ClearHistory;
        }
        private void set_39_HamburgerButtonInfo_ClearHistory(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ClearHistory = (global::System.Boolean)Value;
        }
        private object get_40_HamburgerButtonInfo_ClearCache(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ClearCache;
        }
        private void set_40_HamburgerButtonInfo_ClearCache(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ClearCache = (global::System.Boolean)Value;
        }
        private object get_41_HamburgerButtonInfo_Visibility(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Visibility;
        }
        private void set_41_HamburgerButtonInfo_Visibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Visibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_42_HamburgerButtonInfo_IsEnabled(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.IsEnabled;
        }
        private void set_42_HamburgerButtonInfo_IsEnabled(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_43_HamburgerButtonInfo_IsChecked(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.IsChecked;
        }
        private void set_43_HamburgerButtonInfo_IsChecked(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.IsChecked = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_44_HamburgerButtonInfo_MaxWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.MaxWidth;
        }
        private void set_44_HamburgerButtonInfo_MaxWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_45_HamburgerMenu_PaneBorderThickness(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneBorderThickness;
        }
        private void set_45_HamburgerMenu_PaneBorderThickness(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneBorderThickness = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_46_HamburgerMenu_SecondarySeparator(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondarySeparator;
        }
        private void set_46_HamburgerMenu_SecondarySeparator(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondarySeparator = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_47_HamburgerMenu_NavButtonBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonBackground;
        }
        private void set_47_HamburgerMenu_NavButtonBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_48_HamburgerMenu_NavButtonForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonForeground;
        }
        private void set_48_HamburgerMenu_NavButtonForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_49_HamburgerMenu_NavAreaBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavAreaBackground;
        }
        private void set_49_HamburgerMenu_NavAreaBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavAreaBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_50_HamburgerMenu_HamburgerForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerForeground;
        }
        private void set_50_HamburgerMenu_HamburgerForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_51_HamburgerMenu_HamburgerBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerBackground;
        }
        private void set_51_HamburgerMenu_HamburgerBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_52_HamburgerMenu_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_52_HamburgerMenu_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_53_HamburgerMenu_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_53_HamburgerMenu_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_54_HamburgerMenu_VisualStateWideMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateWideMinWidth;
        }
        private void set_54_HamburgerMenu_VisualStateWideMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateWideMinWidth = (global::System.Double)Value;
        }
        private object get_55_HamburgerMenu_PaneBorderBrush(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneBorderBrush;
        }
        private void set_55_HamburgerMenu_PaneBorderBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_56_HamburgerMenu_NavButtonCheckedForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedForeground;
        }
        private void set_56_HamburgerMenu_NavButtonCheckedForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_57_HamburgerMenu_NavButtonCheckedBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedBackground;
        }
        private void set_57_HamburgerMenu_NavButtonCheckedBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_58_HamburgerMenu_NavButtonCheckedIndicatorBrush(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedIndicatorBrush;
        }
        private void set_58_HamburgerMenu_NavButtonCheckedIndicatorBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedIndicatorBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_59_HamburgerMenu_NavButtonPressedForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonPressedForeground;
        }
        private void set_59_HamburgerMenu_NavButtonPressedForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonPressedForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_60_HamburgerMenu_NavButtonPressedBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonPressedBackground;
        }
        private void set_60_HamburgerMenu_NavButtonPressedBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonPressedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_61_HamburgerMenu_NavButtonHoverForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonHoverForeground;
        }
        private void set_61_HamburgerMenu_NavButtonHoverForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonHoverForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_62_HamburgerMenu_NavButtonHoverBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonHoverBackground;
        }
        private void set_62_HamburgerMenu_NavButtonHoverBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonHoverBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_63_HamburgerMenu_HamburgerButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerButtonVisibility;
        }
        private void set_63_HamburgerMenu_HamburgerButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_64_HamburgerMenu_DisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.DisplayMode;
        }
        private void set_64_HamburgerMenu_DisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.DisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_65_HamburgerMenu_VisualStateNarrowDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNarrowDisplayMode;
        }
        private void set_65_HamburgerMenu_VisualStateNarrowDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNarrowDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_66_HamburgerMenu_VisualStateNormalDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNormalDisplayMode;
        }
        private void set_66_HamburgerMenu_VisualStateNormalDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNormalDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_67_HamburgerMenu_VisualStateWideDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateWideDisplayMode;
        }
        private void set_67_HamburgerMenu_VisualStateWideDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateWideDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_68_HamburgerMenu_SecondaryButtonOrientation(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondaryButtonOrientation;
        }
        private void set_68_HamburgerMenu_SecondaryButtonOrientation(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondaryButtonOrientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_69_HamburgerMenu_AccentColor(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.AccentColor;
        }
        private void set_69_HamburgerMenu_AccentColor(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.AccentColor = (global::Windows.UI.Color)Value;
        }
        private object get_70_HamburgerMenu_Selected(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.Selected;
        }
        private void set_70_HamburgerMenu_Selected(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.Selected = (global::Template10.Controls.HamburgerButtonInfo)Value;
        }
        private object get_71_HamburgerMenu_NavigationService(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavigationService;
        }
        private void set_71_HamburgerMenu_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_72_HamburgerMenu_IsFullScreen(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.IsFullScreen;
        }
        private void set_72_HamburgerMenu_IsFullScreen(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.IsFullScreen = (global::System.Boolean)Value;
        }
        private object get_73_HamburgerMenu_PaneWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneWidth;
        }
        private void set_73_HamburgerMenu_PaneWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneWidth = (global::System.Double)Value;
        }
        private object get_74_HamburgerMenu_HamburgerButtonGridWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerButtonGridWidth;
        }
        private void set_74_HamburgerMenu_HamburgerButtonGridWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerButtonGridWidth = (global::System.Double)Value;
        }
        private object get_75_HamburgerMenu_OpenCloseMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.OpenCloseMode;
        }
        private void set_75_HamburgerMenu_OpenCloseMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.OpenCloseMode = (global::Template10.Controls.HamburgerMenu.OpenCloseModes)Value;
        }
        private object get_76_HamburgerMenu_HeaderContent(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HeaderContent;
        }
        private void set_76_HamburgerMenu_HeaderContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HeaderContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_77_HamburgerMenu_IsOpen(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.IsOpen;
        }
        private void set_77_HamburgerMenu_IsOpen(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_78_HamburgerMenu_SecondaryButtons(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondaryButtons;
        }
        private void set_78_HamburgerMenu_SecondaryButtons(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondaryButtons = (global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>)Value;
        }
        private object get_79_HamburgerMenu_NavCommand(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavCommand;
        }
        private object get_80_HamburgerMenu_PropertyChangedHandlers(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PropertyChangedHandlers;
        }
        private object get_81_PageHeader_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_81_PageHeader_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_82_PageHeader_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_82_PageHeader_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_83_PageHeader_EllipsisVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EllipsisVisibility;
        }
        private void set_83_PageHeader_EllipsisVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EllipsisVisibility = (global::Template10.Behaviors.EllipsisBehavior.Visibilities)Value;
        }
        private object get_84_PageHeader_PrimaryCommandsVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.PrimaryCommandsVisibility;
        }
        private void set_84_PageHeader_PrimaryCommandsVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.PrimaryCommandsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_85_PageHeader_BackButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonVisibility;
        }
        private void set_85_PageHeader_BackButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_86_PageHeader_BackButtonContent(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonContent;
        }
        private void set_86_PageHeader_BackButtonContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonContent = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_87_PageHeader_Frame(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Frame;
        }
        private void set_87_PageHeader_Frame(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Frame = (global::Windows.UI.Xaml.Controls.Frame)Value;
        }
        private object get_88_PageHeader_EnableHamburgerMenuAutoLayout(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EnableHamburgerMenuAutoLayout;
        }
        private void set_88_PageHeader_EnableHamburgerMenuAutoLayout(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EnableHamburgerMenuAutoLayout = (global::System.Boolean)Value;
        }
        private object get_89_PageHeader_Text(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Text;
        }
        private void set_89_PageHeader_Text(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_90_Resizer_ElementControl(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.ElementControl;
        }
        private void set_90_Resizer_ElementControl(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.ElementControl = (global::Windows.UI.Xaml.Controls.Control)Value;
        }
        private object get_91_Resizer_GrabberBrush(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberBrush;
        }
        private void set_91_Resizer_GrabberBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_92_Resizer_GrabberVisibility(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberVisibility;
        }
        private void set_92_Resizer_GrabberVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_93_Resizer_GrabberSize(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberSize;
        }
        private void set_93_Resizer_GrabberSize(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberSize = (global::Windows.Foundation.Size)Value;
        }
        private object get_94_Busy_BusyText(object instance)
        {
            var that = (global::flickrSense.Views.Busy)instance;
            return that.BusyText;
        }
        private void set_94_Busy_BusyText(object instance, object Value)
        {
            var that = (global::flickrSense.Views.Busy)instance;
            that.BusyText = (global::System.String)Value;
        }
        private object get_95_Busy_IsBusy(object instance)
        {
            var that = (global::flickrSense.Views.Busy)instance;
            return that.IsBusy;
        }
        private void set_95_Busy_IsBusy(object instance, object Value)
        {
            var that = (global::flickrSense.Views.Busy)instance;
            that.IsBusy = (global::System.Boolean)Value;
        }
        private object get_96_ValueWhenConverter_When(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.When;
        }
        private void set_96_ValueWhenConverter_When(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.When = (global::System.Object)Value;
        }
        private object get_97_ValueWhenConverter_Value(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Value;
        }
        private void set_97_ValueWhenConverter_Value(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_98_ValueWhenConverter_Otherwise(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Otherwise;
        }
        private void set_98_ValueWhenConverter_Otherwise(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Otherwise = (global::System.Object)Value;
        }
        private object get_99_ValueWhenConverter_OtherwiseValueBack(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.OtherwiseValueBack;
        }
        private void set_99_ValueWhenConverter_OtherwiseValueBack(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.OtherwiseValueBack = (global::System.Object)Value;
        }
        private object get_100_ValueWhenConverter_Debug(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Debug;
        }
        private void set_100_ValueWhenConverter_Debug(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Debug = (global::System.Boolean)Value;
        }
        private object get_101_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_101_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_102_AdaptiveGridView_MinItemHeight(object instance)
        {
            var that = (global::UwpHelpers.Controls.ListControls.AdaptiveGridView)instance;
            return that.MinItemHeight;
        }
        private void set_102_AdaptiveGridView_MinItemHeight(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ListControls.AdaptiveGridView)instance;
            that.MinItemHeight = (global::System.Double)Value;
        }
        private object get_103_AdaptiveGridView_MinItemWidth(object instance)
        {
            var that = (global::UwpHelpers.Controls.ListControls.AdaptiveGridView)instance;
            return that.MinItemWidth;
        }
        private void set_103_AdaptiveGridView_MinItemWidth(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ListControls.AdaptiveGridView)instance;
            that.MinItemWidth = (global::System.Double)Value;
        }
        private object get_104_AdaptiveGridView_HasItems(object instance)
        {
            var that = (global::UwpHelpers.Controls.ListControls.AdaptiveGridView)instance;
            return that.HasItems;
        }
        private void set_104_AdaptiveGridView_HasItems(object instance, object Value)
        {
            var that = (global::UwpHelpers.Controls.ListControls.AdaptiveGridView)instance;
            that.HasItems = (global::System.Boolean)Value;
        }
        private object get_105_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_106_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_106_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_107_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_107_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_108_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior)instance;
            return that.AssociatedObject;
        }
        private object get_109_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_109_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_110_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_110_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_111_InvokeCommandAction_InputConverter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverter;
        }
        private void set_111_InvokeCommandAction_InputConverter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_112_InvokeCommandAction_InputConverterParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterParameter;
        }
        private void set_112_InvokeCommandAction_InputConverterParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterParameter = (global::System.Object)Value;
        }
        private object get_113_InvokeCommandAction_InputConverterLanguage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterLanguage;
        }
        private void set_113_InvokeCommandAction_InputConverterLanguage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterLanguage = (global::System.String)Value;
        }
        private object get_114_SettingsPageViewModel_SettingsPartViewModel(object instance)
        {
            var that = (global::flickrSense.ViewModels.SettingsPageViewModel)instance;
            return that.SettingsPartViewModel;
        }
        private object get_115_SettingsPageViewModel_AboutPartViewModel(object instance)
        {
            var that = (global::flickrSense.ViewModels.SettingsPageViewModel)instance;
            return that.AboutPartViewModel;
        }
        private object get_116_ViewModelBase_NavigationService(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.NavigationService;
        }
        private void set_116_ViewModelBase_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_117_ViewModelBase_Dispatcher(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.Dispatcher;
        }
        private void set_117_ViewModelBase_Dispatcher(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.Dispatcher = (global::Template10.Common.IDispatcherWrapper)Value;
        }
        private object get_118_ViewModelBase_SessionState(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.SessionState;
        }
        private void set_118_ViewModelBase_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.SessionState = (global::Template10.Common.IStateItems)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember xamlMember = null;
            global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Template10.Common.BootStrapper.SessionState":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.StateItems");
                xamlMember.Getter = get_0_BootStrapper_SessionState;
                xamlMember.Setter = set_0_BootStrapper_SessionState;
                break;
            case "Template10.Common.BootStrapper.NavigationService":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_1_BootStrapper_NavigationService;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.SplashFactory":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "SplashFactory", "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>");
                xamlMember.Getter = get_2_BootStrapper_SplashFactory;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CacheMaxDuration":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "CacheMaxDuration", "TimeSpan");
                xamlMember.Getter = get_3_BootStrapper_CacheMaxDuration;
                xamlMember.Setter = set_3_BootStrapper_CacheMaxDuration;
                break;
            case "Template10.Common.BootStrapper.ShowShellBackButton":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ShowShellBackButton", "Boolean");
                xamlMember.Getter = get_4_BootStrapper_ShowShellBackButton;
                xamlMember.Setter = set_4_BootStrapper_ShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.ForceShowShellBackButton":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ForceShowShellBackButton", "Boolean");
                xamlMember.Getter = get_5_BootStrapper_ForceShowShellBackButton;
                xamlMember.Setter = set_5_BootStrapper_ForceShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.OriginalActivatedArgs":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "OriginalActivatedArgs", "Windows.ApplicationModel.Activation.IActivatedEventArgs");
                xamlMember.Getter = get_6_BootStrapper_OriginalActivatedArgs;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CurrentState":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "CurrentState", "Template10.Common.BootStrapper.States");
                xamlMember.Getter = get_7_BootStrapper_CurrentState;
                xamlMember.Setter = set_7_BootStrapper_CurrentState;
                break;
            case "Template10.Common.BootStrapper.EnableAutoRestoreAfterTerminated":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "EnableAutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                xamlMember.Setter = set_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoRestoreAfterTerminated":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "AutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_9_BootStrapper_AutoRestoreAfterTerminated;
                xamlMember.Setter = set_9_BootStrapper_AutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoExtendExecutionSession":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "AutoExtendExecutionSession", "Boolean");
                xamlMember.Getter = get_10_BootStrapper_AutoExtendExecutionSession;
                xamlMember.Setter = set_10_BootStrapper_AutoExtendExecutionSession;
                break;
            case "Template10.Common.BootStrapper.AutoSuspendAllFrames":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "AutoSuspendAllFrames", "Boolean");
                xamlMember.Getter = get_11_BootStrapper_AutoSuspendAllFrames;
                xamlMember.Setter = set_11_BootStrapper_AutoSuspendAllFrames;
                break;
            case "Template10.Common.BootStrapper.ModalDialog":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ModalDialog", "Template10.Controls.ModalDialog");
                xamlMember.Getter = get_12_BootStrapper_ModalDialog;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.ModalContent":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ModalContent", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_13_BootStrapper_ModalContent;
                xamlMember.Setter = set_13_BootStrapper_ModalContent;
                break;
            case "flickrSense.ViewModels.ViewModelLocator.MainPageVm":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("flickrSense.ViewModels.ViewModelLocator");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "MainPageVm", "flickrSense.ViewModels.MainPageViewModel");
                xamlMember.Getter = get_14_ViewModelLocator_MainPageVm;
                xamlMember.SetIsReadOnly();
                break;
            case "flickrSense.ViewModels.ViewModelLocator.DetailPageVm":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("flickrSense.ViewModels.ViewModelLocator");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "DetailPageVm", "flickrSense.ViewModels.DetailPageViewModel");
                xamlMember.Getter = get_15_ViewModelLocator_DetailPageVm;
                xamlMember.SetIsReadOnly();
                break;
            case "flickrSense.ViewModels.ViewModelLocator.MapControlPageVm":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("flickrSense.ViewModels.ViewModelLocator");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "MapControlPageVm", "flickrSense.ViewModels.MapControlPageViewModel");
                xamlMember.Getter = get_16_ViewModelLocator_MapControlPageVm;
                xamlMember.SetIsReadOnly();
                break;
            case "UwpHelpers.Controls.ImageControls.NetworkImage.ImageUrl":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ImageControls.NetworkImage");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ImageUrl", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_NetworkImage_ImageUrl;
                xamlMember.Setter = set_17_NetworkImage_ImageUrl;
                break;
            case "UwpHelpers.Controls.ImageControls.NetworkImage.ImageDecodeWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ImageControls.NetworkImage");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ImageDecodeWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_NetworkImage_ImageDecodeWidth;
                xamlMember.Setter = set_18_NetworkImage_ImageDecodeWidth;
                break;
            case "UwpHelpers.Controls.ImageControls.NetworkImage.ImageDecodeHeight":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ImageControls.NetworkImage");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ImageDecodeHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_NetworkImage_ImageDecodeHeight;
                xamlMember.Setter = set_19_NetworkImage_ImageDecodeHeight;
                break;
            case "UwpHelpers.Controls.ImageControls.NetworkImage.IsActive":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ImageControls.NetworkImage");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_NetworkImage_IsActive;
                xamlMember.Setter = set_20_NetworkImage_IsActive;
                break;
            case "UwpHelpers.Controls.ImageControls.NetworkImage.DownloadProgressStatus":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ImageControls.NetworkImage");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "DownloadProgressStatus", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_NetworkImage_DownloadProgressStatus;
                xamlMember.Setter = set_21_NetworkImage_DownloadProgressStatus;
                break;
            case "UwpHelpers.Controls.ImageControls.NetworkImage.ImageStretch":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ImageControls.NetworkImage");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ImageStretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_NetworkImage_ImageStretch;
                xamlMember.Setter = set_22_NetworkImage_ImageStretch;
                break;
            case "UwpHelpers.Controls.ImageControls.NetworkImage.DownloadPercentageVisibility":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ImageControls.NetworkImage");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "DownloadPercentageVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_NetworkImage_DownloadPercentageVisibility;
                xamlMember.Setter = set_23_NetworkImage_DownloadPercentageVisibility;
                break;
            case "UwpHelpers.Controls.ImageControls.NetworkImage.ProgressRingVisibility":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ImageControls.NetworkImage");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ProgressRingVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_NetworkImage_ProgressRingVisibility;
                xamlMember.Setter = set_24_NetworkImage_ProgressRingVisibility;
                break;
            case "Windows.UI.Color.A":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_25_Color_A;
                xamlMember.Setter = set_25_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_26_Color_B;
                xamlMember.Setter = set_26_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_27_Color_G;
                xamlMember.Setter = set_27_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_28_Color_R;
                xamlMember.Setter = set_28_Color_R;
                break;
            case "Template10.Controls.HamburgerMenu.PrimaryButtons":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "PrimaryButtons", "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_HamburgerMenu_PrimaryButtons;
                xamlMember.Setter = set_29_HamburgerMenu_PrimaryButtons;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Content":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_HamburgerButtonInfo_Content;
                xamlMember.Setter = set_30_HamburgerButtonInfo_Content;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ButtonType":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ButtonType", "Template10.Controls.HamburgerButtonInfo.ButtonTypes");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_HamburgerButtonInfo_ButtonType;
                xamlMember.Setter = set_31_HamburgerButtonInfo_ButtonType;
                break;
            case "Template10.Controls.HamburgerButtonInfo.NavigationTransitionInfo":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavigationTransitionInfo", "Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_HamburgerButtonInfo_NavigationTransitionInfo;
                xamlMember.Setter = set_32_HamburgerButtonInfo_NavigationTransitionInfo;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Command":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_HamburgerButtonInfo_Command;
                xamlMember.Setter = set_33_HamburgerButtonInfo_Command;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ToolTip":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ToolTip", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_HamburgerButtonInfo_ToolTip;
                xamlMember.Setter = set_34_HamburgerButtonInfo_ToolTip;
                break;
            case "Template10.Controls.HamburgerButtonInfo.CommandParameter":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_HamburgerButtonInfo_CommandParameter;
                xamlMember.Setter = set_35_HamburgerButtonInfo_CommandParameter;
                break;
            case "Template10.Controls.HamburgerButtonInfo.GroupName":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "GroupName", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_HamburgerButtonInfo_GroupName;
                xamlMember.Setter = set_36_HamburgerButtonInfo_GroupName;
                break;
            case "Template10.Controls.HamburgerButtonInfo.PageType":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "PageType", "System.Type");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_HamburgerButtonInfo_PageType;
                xamlMember.Setter = set_37_HamburgerButtonInfo_PageType;
                break;
            case "Template10.Controls.HamburgerButtonInfo.PageParameter":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "PageParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_HamburgerButtonInfo_PageParameter;
                xamlMember.Setter = set_38_HamburgerButtonInfo_PageParameter;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ClearHistory":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ClearHistory", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_HamburgerButtonInfo_ClearHistory;
                xamlMember.Setter = set_39_HamburgerButtonInfo_ClearHistory;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ClearCache":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ClearCache", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_HamburgerButtonInfo_ClearCache;
                xamlMember.Setter = set_40_HamburgerButtonInfo_ClearCache;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Visibility":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Visibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_HamburgerButtonInfo_Visibility;
                xamlMember.Setter = set_41_HamburgerButtonInfo_Visibility;
                break;
            case "Template10.Controls.HamburgerButtonInfo.IsEnabled":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_HamburgerButtonInfo_IsEnabled;
                xamlMember.Setter = set_42_HamburgerButtonInfo_IsEnabled;
                break;
            case "Template10.Controls.HamburgerButtonInfo.IsChecked":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "IsChecked", "System.Nullable`1<Boolean>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_HamburgerButtonInfo_IsChecked;
                xamlMember.Setter = set_43_HamburgerButtonInfo_IsChecked;
                break;
            case "Template10.Controls.HamburgerButtonInfo.MaxWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_HamburgerButtonInfo_MaxWidth;
                xamlMember.Setter = set_44_HamburgerButtonInfo_MaxWidth;
                break;
            case "Template10.Controls.HamburgerMenu.PaneBorderThickness":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "PaneBorderThickness", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_HamburgerMenu_PaneBorderThickness;
                xamlMember.Setter = set_45_HamburgerMenu_PaneBorderThickness;
                break;
            case "Template10.Controls.HamburgerMenu.SecondarySeparator":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "SecondarySeparator", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_HamburgerMenu_SecondarySeparator;
                xamlMember.Setter = set_46_HamburgerMenu_SecondarySeparator;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonBackground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_HamburgerMenu_NavButtonBackground;
                xamlMember.Setter = set_47_HamburgerMenu_NavButtonBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonForeground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_HamburgerMenu_NavButtonForeground;
                xamlMember.Setter = set_48_HamburgerMenu_NavButtonForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavAreaBackground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavAreaBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_HamburgerMenu_NavAreaBackground;
                xamlMember.Setter = set_49_HamburgerMenu_NavAreaBackground;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerForeground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "HamburgerForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_HamburgerMenu_HamburgerForeground;
                xamlMember.Setter = set_50_HamburgerMenu_HamburgerForeground;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerBackground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "HamburgerBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_HamburgerMenu_HamburgerBackground;
                xamlMember.Setter = set_51_HamburgerMenu_HamburgerBackground;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNarrowMinWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_HamburgerMenu_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_52_HamburgerMenu_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNormalMinWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_HamburgerMenu_VisualStateNormalMinWidth;
                xamlMember.Setter = set_53_HamburgerMenu_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateWideMinWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "VisualStateWideMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_HamburgerMenu_VisualStateWideMinWidth;
                xamlMember.Setter = set_54_HamburgerMenu_VisualStateWideMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.PaneBorderBrush":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "PaneBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_HamburgerMenu_PaneBorderBrush;
                xamlMember.Setter = set_55_HamburgerMenu_PaneBorderBrush;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedForeground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonCheckedForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_HamburgerMenu_NavButtonCheckedForeground;
                xamlMember.Setter = set_56_HamburgerMenu_NavButtonCheckedForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedBackground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonCheckedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_HamburgerMenu_NavButtonCheckedBackground;
                xamlMember.Setter = set_57_HamburgerMenu_NavButtonCheckedBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedIndicatorBrush":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonCheckedIndicatorBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_HamburgerMenu_NavButtonCheckedIndicatorBrush;
                xamlMember.Setter = set_58_HamburgerMenu_NavButtonCheckedIndicatorBrush;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonPressedForeground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonPressedForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_HamburgerMenu_NavButtonPressedForeground;
                xamlMember.Setter = set_59_HamburgerMenu_NavButtonPressedForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonPressedBackground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonPressedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_HamburgerMenu_NavButtonPressedBackground;
                xamlMember.Setter = set_60_HamburgerMenu_NavButtonPressedBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonHoverForeground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonHoverForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_HamburgerMenu_NavButtonHoverForeground;
                xamlMember.Setter = set_61_HamburgerMenu_NavButtonHoverForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonHoverBackground":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavButtonHoverBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_HamburgerMenu_NavButtonHoverBackground;
                xamlMember.Setter = set_62_HamburgerMenu_NavButtonHoverBackground;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerButtonVisibility":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "HamburgerButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_HamburgerMenu_HamburgerButtonVisibility;
                xamlMember.Setter = set_63_HamburgerMenu_HamburgerButtonVisibility;
                break;
            case "Template10.Controls.HamburgerMenu.DisplayMode":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "DisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_HamburgerMenu_DisplayMode;
                xamlMember.Setter = set_64_HamburgerMenu_DisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNarrowDisplayMode":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "VisualStateNarrowDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_HamburgerMenu_VisualStateNarrowDisplayMode;
                xamlMember.Setter = set_65_HamburgerMenu_VisualStateNarrowDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNormalDisplayMode":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "VisualStateNormalDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_HamburgerMenu_VisualStateNormalDisplayMode;
                xamlMember.Setter = set_66_HamburgerMenu_VisualStateNormalDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateWideDisplayMode":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "VisualStateWideDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_HamburgerMenu_VisualStateWideDisplayMode;
                xamlMember.Setter = set_67_HamburgerMenu_VisualStateWideDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.SecondaryButtonOrientation":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "SecondaryButtonOrientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_HamburgerMenu_SecondaryButtonOrientation;
                xamlMember.Setter = set_68_HamburgerMenu_SecondaryButtonOrientation;
                break;
            case "Template10.Controls.HamburgerMenu.AccentColor":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "AccentColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_HamburgerMenu_AccentColor;
                xamlMember.Setter = set_69_HamburgerMenu_AccentColor;
                break;
            case "Template10.Controls.HamburgerMenu.Selected":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Selected", "Template10.Controls.HamburgerButtonInfo");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_HamburgerMenu_Selected;
                xamlMember.Setter = set_70_HamburgerMenu_Selected;
                break;
            case "Template10.Controls.HamburgerMenu.NavigationService":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_HamburgerMenu_NavigationService;
                xamlMember.Setter = set_71_HamburgerMenu_NavigationService;
                break;
            case "Template10.Controls.HamburgerMenu.IsFullScreen":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "IsFullScreen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_HamburgerMenu_IsFullScreen;
                xamlMember.Setter = set_72_HamburgerMenu_IsFullScreen;
                break;
            case "Template10.Controls.HamburgerMenu.PaneWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "PaneWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_HamburgerMenu_PaneWidth;
                xamlMember.Setter = set_73_HamburgerMenu_PaneWidth;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerButtonGridWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "HamburgerButtonGridWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_HamburgerMenu_HamburgerButtonGridWidth;
                xamlMember.Setter = set_74_HamburgerMenu_HamburgerButtonGridWidth;
                break;
            case "Template10.Controls.HamburgerMenu.OpenCloseMode":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "OpenCloseMode", "Template10.Controls.HamburgerMenu.OpenCloseModes");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_HamburgerMenu_OpenCloseMode;
                xamlMember.Setter = set_75_HamburgerMenu_OpenCloseMode;
                break;
            case "Template10.Controls.HamburgerMenu.HeaderContent":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "HeaderContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_HamburgerMenu_HeaderContent;
                xamlMember.Setter = set_76_HamburgerMenu_HeaderContent;
                break;
            case "Template10.Controls.HamburgerMenu.IsOpen":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_HamburgerMenu_IsOpen;
                xamlMember.Setter = set_77_HamburgerMenu_IsOpen;
                break;
            case "Template10.Controls.HamburgerMenu.SecondaryButtons":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "SecondaryButtons", "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_HamburgerMenu_SecondaryButtons;
                xamlMember.Setter = set_78_HamburgerMenu_SecondaryButtons;
                break;
            case "Template10.Controls.HamburgerMenu.NavCommand":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavCommand", "Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.Getter = get_79_HamburgerMenu_NavCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Controls.HamburgerMenu.PropertyChangedHandlers":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "PropertyChangedHandlers", "Object");
                xamlMember.Getter = get_80_HamburgerMenu_PropertyChangedHandlers;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Controls.PageHeader.VisualStateNarrowMinWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_PageHeader_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_81_PageHeader_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.PageHeader.VisualStateNormalMinWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_PageHeader_VisualStateNormalMinWidth;
                xamlMember.Setter = set_82_PageHeader_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.PageHeader.EllipsisVisibility":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "EllipsisVisibility", "Template10.Behaviors.EllipsisBehavior.Visibilities");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_PageHeader_EllipsisVisibility;
                xamlMember.Setter = set_83_PageHeader_EllipsisVisibility;
                break;
            case "Template10.Controls.PageHeader.PrimaryCommandsVisibility":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "PrimaryCommandsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_PageHeader_PrimaryCommandsVisibility;
                xamlMember.Setter = set_84_PageHeader_PrimaryCommandsVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonVisibility":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "BackButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_PageHeader_BackButtonVisibility;
                xamlMember.Setter = set_85_PageHeader_BackButtonVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonContent":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "BackButtonContent", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_PageHeader_BackButtonContent;
                xamlMember.Setter = set_86_PageHeader_BackButtonContent;
                break;
            case "Template10.Controls.PageHeader.Frame":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Frame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_PageHeader_Frame;
                xamlMember.Setter = set_87_PageHeader_Frame;
                break;
            case "Template10.Controls.PageHeader.EnableHamburgerMenuAutoLayout":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "EnableHamburgerMenuAutoLayout", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_PageHeader_EnableHamburgerMenuAutoLayout;
                xamlMember.Setter = set_88_PageHeader_EnableHamburgerMenuAutoLayout;
                break;
            case "Template10.Controls.PageHeader.Text":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_PageHeader_Text;
                xamlMember.Setter = set_89_PageHeader_Text;
                break;
            case "Template10.Controls.Resizer.ElementControl":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "ElementControl", "Windows.UI.Xaml.Controls.Control");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_Resizer_ElementControl;
                xamlMember.Setter = set_90_Resizer_ElementControl;
                break;
            case "Template10.Controls.Resizer.GrabberBrush":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "GrabberBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_Resizer_GrabberBrush;
                xamlMember.Setter = set_91_Resizer_GrabberBrush;
                break;
            case "Template10.Controls.Resizer.GrabberVisibility":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "GrabberVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_Resizer_GrabberVisibility;
                xamlMember.Setter = set_92_Resizer_GrabberVisibility;
                break;
            case "Template10.Controls.Resizer.GrabberSize":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "GrabberSize", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_Resizer_GrabberSize;
                xamlMember.Setter = set_93_Resizer_GrabberSize;
                break;
            case "flickrSense.Views.Busy.BusyText":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("flickrSense.Views.Busy");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "BusyText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_Busy_BusyText;
                xamlMember.Setter = set_94_Busy_BusyText;
                break;
            case "flickrSense.Views.Busy.IsBusy":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("flickrSense.Views.Busy");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "IsBusy", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_Busy_IsBusy;
                xamlMember.Setter = set_95_Busy_IsBusy;
                break;
            case "Template10.Converters.ValueWhenConverter.When":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "When", "Object");
                xamlMember.Getter = get_96_ValueWhenConverter_When;
                xamlMember.Setter = set_96_ValueWhenConverter_When;
                break;
            case "Template10.Converters.ValueWhenConverter.Value":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.Getter = get_97_ValueWhenConverter_Value;
                xamlMember.Setter = set_97_ValueWhenConverter_Value;
                break;
            case "Template10.Converters.ValueWhenConverter.Otherwise":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Otherwise", "Object");
                xamlMember.Getter = get_98_ValueWhenConverter_Otherwise;
                xamlMember.Setter = set_98_ValueWhenConverter_Otherwise;
                break;
            case "Template10.Converters.ValueWhenConverter.OtherwiseValueBack":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "OtherwiseValueBack", "Object");
                xamlMember.Getter = get_99_ValueWhenConverter_OtherwiseValueBack;
                xamlMember.Setter = set_99_ValueWhenConverter_OtherwiseValueBack;
                break;
            case "Template10.Converters.ValueWhenConverter.Debug":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Debug", "Boolean");
                xamlMember.Getter = get_100_ValueWhenConverter_Debug;
                xamlMember.Setter = set_100_ValueWhenConverter_Debug;
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_101_Interaction_Behaviors;
                xamlMember.Setter = set_101_Interaction_Behaviors;
                break;
            case "UwpHelpers.Controls.ListControls.AdaptiveGridView.MinItemHeight":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ListControls.AdaptiveGridView");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "MinItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_AdaptiveGridView_MinItemHeight;
                xamlMember.Setter = set_102_AdaptiveGridView_MinItemHeight;
                break;
            case "UwpHelpers.Controls.ListControls.AdaptiveGridView.MinItemWidth":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ListControls.AdaptiveGridView");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "MinItemWidth", "Double");
                xamlMember.Getter = get_103_AdaptiveGridView_MinItemWidth;
                xamlMember.Setter = set_103_AdaptiveGridView_MinItemWidth;
                break;
            case "UwpHelpers.Controls.ListControls.AdaptiveGridView.HasItems":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UwpHelpers.Controls.ListControls.AdaptiveGridView");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "HasItems", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_AdaptiveGridView_HasItems;
                xamlMember.Setter = set_104_AdaptiveGridView_HasItems;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_106_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_107_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior.AssociatedObject":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_108_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.Command":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_InvokeCommandAction_Command;
                xamlMember.Setter = set_109_InvokeCommandAction_Command;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.CommandParameter":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_110_InvokeCommandAction_CommandParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverter":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "InputConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_InvokeCommandAction_InputConverter;
                xamlMember.Setter = set_111_InvokeCommandAction_InputConverter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterParameter":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "InputConverterParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_InvokeCommandAction_InputConverterParameter;
                xamlMember.Setter = set_112_InvokeCommandAction_InputConverterParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterLanguage":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "InputConverterLanguage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_InvokeCommandAction_InputConverterLanguage;
                xamlMember.Setter = set_113_InvokeCommandAction_InputConverterLanguage;
                break;
            case "flickrSense.ViewModels.SettingsPageViewModel.SettingsPartViewModel":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("flickrSense.ViewModels.SettingsPageViewModel");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "SettingsPartViewModel", "flickrSense.ViewModels.SettingsPartViewModel");
                xamlMember.Getter = get_114_SettingsPageViewModel_SettingsPartViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "flickrSense.ViewModels.SettingsPageViewModel.AboutPartViewModel":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("flickrSense.ViewModels.SettingsPageViewModel");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "AboutPartViewModel", "flickrSense.ViewModels.AboutPartViewModel");
                xamlMember.Getter = get_115_SettingsPageViewModel_AboutPartViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Mvvm.ViewModelBase.NavigationService":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_116_ViewModelBase_NavigationService;
                xamlMember.Setter = set_116_ViewModelBase_NavigationService;
                break;
            case "Template10.Mvvm.ViewModelBase.Dispatcher":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "Dispatcher", "Template10.Common.IDispatcherWrapper");
                xamlMember.Getter = get_117_ViewModelBase_Dispatcher;
                xamlMember.Setter = set_117_ViewModelBase_Dispatcher;
                break;
            case "Template10.Mvvm.ViewModelBase.SessionState":
                userType = (global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.IStateItems");
                xamlMember.Getter = get_118_ViewModelBase_SessionState;
                xamlMember.Setter = set_118_ViewModelBase_SessionState;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlSystemBaseType
    {
        global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::flickrSense.FlickrClientApp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

